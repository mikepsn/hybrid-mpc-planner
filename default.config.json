{
	"engine": {
		"tag_comment": ["Possible pre-configured engines include:",
							"* gbfs_chff:  Greedy Best-First Search with the Constrained h_FF heuristic",
							"* gbfs_chmax: Greedy Best-First Search with the Constrained h_MAX heuristic",
							"* iterated_width: The IW algorithm (Breadth-First Search with novelty pruning)",
							"* breadth_first_search: A plain and blind Breadth-First Search."
						],
		"tag": "breadth_first_search",

        "model_comment": [  "Planning models supported are:",
                            "* classical - fully observable, deterministic planning with state constraints",
                            "* hybrid - fully observable, deterministic planning with autonomous processes and state constraints"
                        ],
        "model": "hybrid"

	},

	"csp": {
		"manager_comment": ["The CSP manager to use: either 'gecode', 'direct', 'or direct_if_possible'"],
		"manager": "gecode",

		"model_comment": ["The CSP model we want to work with. Currently accepted: 'action' and 'effect'"],
		"model": "effect",

		"precondition_resolution_comment": ["Either 'full' or 'approximate': whether to fully or only approximately solve the action precondition CSPs"],
		"precondition_resolution": "full",

		"goal_resolution_comment": ["Either 'full' or 'approximate': whether to fully or only approximately solve the goal CSPs"],
		"goal_resolution": "full",

		"value_selection_comment": "The type of CSP value selection to use in goal and action CSPs. Currently accepted values are 'min_val' and 'min_hmax'",
		"goal_value_selection": "min_hmax",
		"action_value_selection": "min_val",

		"support_priority_comment": "Which support sets should be given priority: currently either 'first' or 'min_hmaxsum' ",
		"support_priority": "first",

		"novelty_constraint_comment": "Whether to use ('yes') or not ('no') the novelty constraint",
		"novelty_constraint": "yes",

		"dont_care_optimization_comment": "Whether to use ('yes') or not ('no') the DON'T CARE optimization for element constraints deriving from nested fluents",
		"dont_care_optimization": "yes"
	},

	"heuristics": {
		"plan_extraction_comment": ["Either 'propositional' or 'extended' - The type of plan extraction procedure"],
		"plan_extraction": "propositional"
	}
}
